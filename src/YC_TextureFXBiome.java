package net.minecraft.src;

import java.util.Random;

import org.lwjgl.opengl.GL11;

import net.minecraft.src.old.FMLTextureFX;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.block.Block;
import net.minecraft.client.renderer.RenderEngine;


@SideOnly(Side.CLIENT)
public class YC_TextureFXBiome extends FMLTextureFX
{
	public static byte 	DownLeft = 0, 
						DownUp = 1, 
						DownRight = 2, 
						LeftUp = 3, 
						LeftRight = 4, 
						LeftDown = 5, 
						UpRight = 6, 
						UpDown = 7, 
						UpLeft = 8, 
						RightDown = 9, 
						RightLeft = 10, 
						RightUp = 11;
	
	public static int fuzeSize = 11;//10+1. +1 for color reset 
	public static byte[] src = new byte[1024];//to store source
	public static byte[] fuzeColors = new byte[fuzeSize*4];//to store fuze collors depending on current state
	public static short[][] pathsMask = new short[12][16];//12 - number of possible directions; 16 - points (x,y). points to be stored like indexes in [1024] array;
	Random rand;
	int x=0,y=0;
	public boolean WasAdded = false;
	
	public byte LightX=0, LightY=0;
	public short LightState = (byte) 250;
	
    public YC_TextureFXBiome(int par1)
    {
        super(par1);
        setup();
    }

    @Override
    public void setup()
    {
    	rand = new Random(iconIndex);
    	
    	x = iconIndex % 8;
    	y = iconIndex / 8;
    	textureId = YC_ClientProxy.biomeFXTexture;
    	tileImage = YC_ClientProxy.biomeFXTexture;
        super.setup();
        
        InitSRC();
        for(int i = 0; i < 1024; i+=4)
        {
        	imageData[i] = src[i];
        	imageData[i+1] = src[i+1];
        	imageData[i+2] = src[i+2];
        	imageData[i+3] = src[i+3];
        }
    }

    public void onTick()
    {
    	if (!WasAdded)
    	{
    		WasAdded = true;
    		YC_ClientProxy.biomeTexturesFX[x+y*8] = this;
    	}
    }
    
    public void Update(boolean primary, int type)//false if only fading
    {
    	if (primary)
    	{
    		ColorFuze(type, YC_ClientTickHandler.TicksInGame % 16-fuzeSize);
    	}
    	else
    	{
    		ColorFuze(type, 16 - (fuzeSize - YC_ClientTickHandler.TicksInGame % 16));
    	}
    }
    
    public void LightUpdate()
    {
    	if (LightState != 250)
    	{
    		LightState--;
    		if (LightState <= 0)
    		{
    			LightState = 250;
    		}
    		else
    			DrawLights();
    	}
    }
    
    public void DrawLights()
    {
    	float L = (LightState-1)/16f;//-0.0625f;
    	int t = GetIndexByXY(LightX, (byte) (LightY));
    	imageData[t] = (byte) (src[t]*(1-L) + L*255);
    	imageData[t+1] = (byte) (src[t+1]*(1-L) + L*255);
    	//imageData[t+2] = (byte) (src[t+2]*(L-0.0625f));i
    }
    
    public int GetIndexByXY(byte x, byte y)
    {
    	return (x+y*16)*4;
    }
    
    public void BlinkLight(byte x, byte y)
    {
    	LightState = 15;
    	LightX = x;
    	LightY = y;
    }

    public void ColorFuze(int type, int start)
    {
        int cur = 0;
    	int end = start+fuzeSize-1;
    	if (start<0)
    	{
    		cur = -start*4;
    		start = 0;
    	}
        int tin = 0;
        for(int i = start; i<end && i < 16; i++)
        {
       		tin = pathsMask[type][i];
       		imageData[tin]=fuzeColors[cur];
       		imageData[tin+1]=fuzeColors[cur+1];
       		imageData[tin+2]=fuzeColors[cur+2];
       		imageData[tin+3]=fuzeColors[cur+3];
       		cur+=4;
        }
    }
    
    public static void InitPaths()
    {
    	//=====================================================================DOWN_LEFT===========================================================================================
    	pathsMask[DownLeft][0] = (8 + 15*16)*4;//{8, 15};
    	pathsMask[DownLeft][1] = (8 + 14*16)*4;//{8, 14};
    	pathsMask[DownLeft][2] = (8 + 13*16)*4;//{8, 13};
    	pathsMask[DownLeft][3] = (7 + 13*16)*4;//{7, 13};
    	pathsMask[DownLeft][4] = (6 + 13*16)*4;//{6, 13};
    	pathsMask[DownLeft][5] = (6 + 12*16)*4;//{6, 12};
    	pathsMask[DownLeft][6] = (6 + 11*16)*4;//{6, 11};
    	pathsMask[DownLeft][7] = (5 + 11*16)*4;//{5, 11};
    	pathsMask[DownLeft][8] = (4 + 11*16)*4;//{4, 11};
    	pathsMask[DownLeft][9] = (3 + 11*16)*4;//{3, 11};
    	pathsMask[DownLeft][10] = (3 + 10*16)*4;//{3, 10};
    	pathsMask[DownLeft][11] = (3 + 9*16)*4;//{3, 9};
    	pathsMask[DownLeft][12] = (3 + 8*16)*4;//{3, 8};
    	pathsMask[DownLeft][13] = (2 + 8*16)*4;//{2, 8};
    	pathsMask[DownLeft][14] = (1 + 8*16)*4;//{1, 8};
    	pathsMask[DownLeft][15] = (0 + 8*16)*4;//{0, 8};
    	//=====================================================================DOWN_UP===========================================================================================
    	pathsMask[DownUp][0] = (8 + 15*16)*4;//{8, 15};
    	pathsMask[DownUp][1] = (8 + 14*16)*4;//{8, 14};
    	pathsMask[DownUp][2] = (8 + 13*16)*4;//{8, 13};
    	pathsMask[DownUp][3] = (8 + 12*16)*4;//{8, 12};
    	pathsMask[DownUp][4] = (8 + 11*16)*4;//{8, 11};
    	pathsMask[DownUp][5] = (8 + 10*16)*4;//{8, 10};
    	pathsMask[DownUp][6] = (8 + 9*16)*4;//{8, 9};
    	pathsMask[DownUp][7] = (8 + 8*16)*4;//{8, 8};
    	pathsMask[DownUp][8] = (8 + 7*16)*4;//{8, 7};
    	pathsMask[DownUp][9] = (8 + 6*16)*4;//{8, 6};
    	pathsMask[DownUp][10] = (8 + 5*16)*4;//{8, 5};
    	pathsMask[DownUp][11] = (8 + 4*16)*4;//{8, 4};
    	pathsMask[DownUp][12] = (8 + 3*16)*4;//{8, 3};
    	pathsMask[DownUp][13] = (8 + 2*16)*4;//{8, 2};
    	pathsMask[DownUp][14] = (8 + 1*16)*4;//{8, 1};
    	pathsMask[DownUp][15] = (8 + 0*16)*4;//{8, 0};
    	//=====================================================================DOWN_RIGHT===========================================================================================
    	pathsMask[DownRight][0] = (8 + 15*16)*4;//{8, 15};
    	pathsMask[DownRight][1] = (8 + 14*16)*4;//{8, 14};
    	pathsMask[DownRight][2] = (8 + 13*16)*4;//{8, 13};
    	pathsMask[DownRight][3] = (9 + 13*16)*4;//{9, 13};
    	pathsMask[DownRight][4] = (10 + 13*16)*4;//{10, 13};
    	pathsMask[DownRight][5] = (10 + 12*16)*4;//{10, 12};
    	pathsMask[DownRight][6] = (10 + 11*16)*4;//{10, 11};
    	pathsMask[DownRight][7] = (11 + 11*16)*4;//{11, 11};
    	pathsMask[DownRight][8] = (12 + 11*16)*4;//{12, 11};
    	pathsMask[DownRight][9] = (13 + 11*16)*4;//{13, 11};
    	pathsMask[DownRight][10] = (13 + 10*16)*4;//{13, 10};
    	pathsMask[DownRight][11] = (13 + 9*16)*4;//{13, 9};
    	pathsMask[DownRight][12] = (13 + 8*16)*4;//{13, 8};
    	pathsMask[DownRight][13] = (14 + 8*16)*4;//{14, 8};
    	pathsMask[DownRight][14] = (15 + 8*16)*4;//{15, 8};
    	pathsMask[DownRight][15] = (15 + 8*16)*4;//{15, 8};
    	//=====================================================================LEFT_UP===========================================================================================
    	pathsMask[LeftUp][0] = (0 + 8*16)*4;//{0,8};
    	pathsMask[LeftUp][1] = (1 + 8*16)*4;//{1,8};
    	pathsMask[LeftUp][2] = (2 + 8*16)*4;//{2,8};
    	pathsMask[LeftUp][3] = (3 + 8*16)*4;//{3,8};
    	pathsMask[LeftUp][4] = (3 + 7*16)*4;//{3,7};
    	pathsMask[LeftUp][5] = (3 + 6*16)*4;//{3,6};
    	pathsMask[LeftUp][6] = (3 + 5*16)*4;//{3,5};
    	pathsMask[LeftUp][7] = (4 + 5*16)*4;//{4,5};
    	pathsMask[LeftUp][8] = (5 + 5*16)*4;//{5,5};
    	pathsMask[LeftUp][9] = (6 + 4*16)*4;//{6,4};
    	pathsMask[LeftUp][10] = (6 + 3*16)*4;//{6,3};
    	pathsMask[LeftUp][11] = (6 + 2*16)*4;//{6,2};
    	pathsMask[LeftUp][12] = (7 + 2*16)*4;//{7,2};
    	pathsMask[LeftUp][13] = (8 + 2*16)*4;//{8,2};
    	pathsMask[LeftUp][14] = (8 + 1*16)*4;//{8,1};
    	pathsMask[LeftUp][15] = (8 + 0*16)*4;//{8,0};
    	//=====================================================================LEFT_RIGHT===========================================================================================
    	pathsMask[LeftRight][0] = (0 + 8*16)*4;//{0, 8};
    	pathsMask[LeftRight][1] = (1 + 8*16)*4;//{1, 8};
    	pathsMask[LeftRight][2] = (2 + 8*16)*4;//{2, 8};
    	pathsMask[LeftRight][3] = (3 + 8*16)*4;//{3, 8};
    	pathsMask[LeftRight][4] = (4 + 8*16)*4;//{4, 8};
    	pathsMask[LeftRight][5] = (5 + 8*16)*4;//{5, 8};
    	pathsMask[LeftRight][6] = (6 + 8*16)*4;//{6, 8};
    	pathsMask[LeftRight][7] = (7 + 8*16)*4;//{7, 8};
    	pathsMask[LeftRight][8] = (8 + 8*16)*4;//{8, 8};
    	pathsMask[LeftRight][9] = (9 + 8*16)*4;//{9, 8};
    	pathsMask[LeftRight][10] = (10 + 8*16)*4;//{10, 8};
    	pathsMask[LeftRight][11] = (11 + 8*16)*4;//{11, 8};
    	pathsMask[LeftRight][12] = (12 + 8*16)*4;//{12, 8};
    	pathsMask[LeftRight][13] = (13 + 8*16)*4;//{13, 8};
    	pathsMask[LeftRight][14] = (14 + 8*16)*4;//{14, 8};
    	pathsMask[LeftRight][15] = (15 + 8*16)*4;//{15, 8};
    	//=====================================================================LEFT_DOWN===========================================================================================
    	pathsMask[LeftDown][0] = (0 + 8*16)*4;//{0, 8};
    	pathsMask[LeftDown][1] = (1 + 8*16)*4;//{1, 8};
    	pathsMask[LeftDown][2] = (2 + 8*16)*4;//{2, 8};
    	pathsMask[LeftDown][3] = (3 + 8*16)*4;//{3, 8};
    	pathsMask[LeftDown][4] = (3 + 9*16)*4;//{3, 9};
    	pathsMask[LeftDown][5] = (3 + 10*16)*4;//{3, 10};
    	pathsMask[LeftDown][6] = (3 + 11*16)*4;//{3, 11};
    	pathsMask[LeftDown][7] = (4 + 11*16)*4;//{4, 11};
    	pathsMask[LeftDown][8] = (5 + 11*16)*4;//{5, 11};
    	pathsMask[LeftDown][9] = (6 + 11*16)*4;//{6, 11};
    	pathsMask[LeftDown][10] = (6 + 12*16)*4;//{6, 12};
    	pathsMask[LeftDown][11] = (6 + 13*16)*4;//{6, 13};
    	pathsMask[LeftDown][12] = (7 + 13*16)*4;//{7, 13};
    	pathsMask[LeftDown][13] = (8 + 13*16)*4;//{8, 13};
    	pathsMask[LeftDown][14] = (8 + 14*16)*4;//{8, 14};
    	pathsMask[LeftDown][15] = (8 + 15*16)*4;//{8, 15};
    	//=====================================================================UP_RIGHT===========================================================================================
    	pathsMask[UpRight][0] = (8 + 0*16)*4;//{8, 0};
    	pathsMask[UpRight][1] = (8 + 1*16)*4;//{8, 1};
    	pathsMask[UpRight][2] = (8 + 2*16)*4;//{8, 2};
    	pathsMask[UpRight][3] = (8 + 3*16)*4;//{8, 3};
    	pathsMask[UpRight][4] = (8 + 4*16)*4;//{8, 4};
    	pathsMask[UpRight][5] = (8 + 5*16)*4;//{8, 5};
    	pathsMask[UpRight][6] = (9 + 5*16)*4;//{9, 5};
    	pathsMask[UpRight][7] = (10 + 5*16)*4;//{10, 5};
    	pathsMask[UpRight][8] = (11 + 5*16)*4;//{11, 5};
    	pathsMask[UpRight][9] = (12 + 5*16)*4;//{12, 5};
    	pathsMask[UpRight][10] = (12 + 6*16)*4;//{12, 6};
    	pathsMask[UpRight][11] = (12 + 7*16)*4;//{12, 7};
    	pathsMask[UpRight][12] = (12 + 8*16)*4;//{13, 7};
    	pathsMask[UpRight][13] = (13 + 8*16)*4;//{13, 8};
    	pathsMask[UpRight][14] = (14 + 8*16)*4;//{14, 8};
    	pathsMask[UpRight][15] = (15 + 8*16)*4;//{15, 8};
    	//=====================================================================UP_DOWN===========================================================================================
    	pathsMask[UpDown][0] = (8 + 0*16)*4;//{8, 0};
    	pathsMask[UpDown][1] = (8 + 1*16)*4;//{8, 1};
    	pathsMask[UpDown][2] = (8 + 2*16)*4;//{8, 2};
    	pathsMask[UpDown][3] = (8 + 3*16)*4;//{8, 3};
    	pathsMask[UpDown][4] = (8 + 4*16)*4;//{8, 4};
    	pathsMask[UpDown][5] = (8 + 5*16)*4;//{8, 5};
    	pathsMask[UpDown][6] = (8 + 6*16)*4;//{8, 6};
    	pathsMask[UpDown][7] = (8 + 7*16)*4;//{8, 7};
    	pathsMask[UpDown][8] = (8 + 8*16)*4;//{8, 8};
    	pathsMask[UpDown][9] = (8 + 9*16)*4;//{8, 9};
    	pathsMask[UpDown][10] = (8 + 10*16)*4;//{8, 10};
    	pathsMask[UpDown][11] = (8 + 11*16)*4;//{8, 11};
    	pathsMask[UpDown][12] = (8 + 12*16)*4;//{8, 12};
    	pathsMask[UpDown][13] = (8 + 13*16)*4;//{8, 13};
    	pathsMask[UpDown][14] = (8 + 14*16)*4;//{8, 14};
    	pathsMask[UpDown][15] = (8 + 15*16)*4;//{8, 15};
    	//=====================================================================UP_LEFT===========================================================================================
    	pathsMask[UpLeft][0] = (8 + 0*16)*4;//{8,0};
    	pathsMask[UpLeft][1] = (8 + 1*16)*4;//{8,1};
    	pathsMask[UpLeft][2] = (8 + 2*16)*4;//{8,2};
    	pathsMask[UpLeft][3] = (7 + 2*16)*4;//{7,2};
    	pathsMask[UpLeft][4] = (6 + 2*16)*4;//{6,2};
    	pathsMask[UpLeft][5] = (6 + 3*16)*4;//{6,3};
    	pathsMask[UpLeft][6] = (6 + 4*16)*4;//{6,4};
    	pathsMask[UpLeft][7] = (5 + 5*16)*4;//{5,5};
    	pathsMask[UpLeft][8] = (4 + 5*16)*4;//{4,5};
    	pathsMask[UpLeft][9] = (3 + 5*16)*4;//{3,5};
    	pathsMask[UpLeft][10] = (3 + 6*16)*4;//{3,6};
    	pathsMask[UpLeft][11] = (3 + 7*16)*4;//{3,7};
    	pathsMask[UpLeft][12] = (3 + 8*16)*4;//{3,8};
    	pathsMask[UpLeft][13] = (2 + 8*16)*4;//{2,8};
    	pathsMask[UpLeft][14] = (1 + 8*16)*4;//{1,8};
    	pathsMask[UpLeft][15] = (0 + 8*16)*4;//{0,8};
    	//=====================================================================RIGHT_DOWN===========================================================================================
    	pathsMask[RightDown][0] = (15 + 8*16)*4;//{15, 8};
    	pathsMask[RightDown][1] = (15 + 8*16)*4;//{15, 8};
    	pathsMask[RightDown][2] = (14 + 8*16)*4;//{14, 8};
    	pathsMask[RightDown][3] = (13 + 8*16)*4;//{13, 8};
    	pathsMask[RightDown][4] = (13 + 9*16)*4;//{13, 9};
    	pathsMask[RightDown][5] = (13 + 10*16)*4;//{13, 10};
    	pathsMask[RightDown][6] = (13 + 11*16)*4;//{13, 11};
    	pathsMask[RightDown][7] = (12 + 11*16)*4;//{12, 11};
    	pathsMask[RightDown][8] = (11 + 11*16)*4;//{11, 11};
    	pathsMask[RightDown][9] = (10 + 11*16)*4;//{10, 11};
    	pathsMask[RightDown][10] = (10 + 12*16)*4;//{10, 12};
    	pathsMask[RightDown][11] = (10 + 13*16)*4;//{10, 13};
    	pathsMask[RightDown][12] = (9 + 13*16)*4;//{9, 13};
    	pathsMask[RightDown][13] = (8 + 13*16)*4;//{8, 13};
    	pathsMask[RightDown][14] = (8 + 14*16)*4;//{8, 14};
    	pathsMask[RightDown][15] = (8 + 15*16)*4;//{8, 15};
    	//=====================================================================RIGHT_LEFT===========================================================================================
    	pathsMask[RightLeft][0] = (15 + 8*16)*4;//{15, 8};
    	pathsMask[RightLeft][1] = (14 + 8*16)*4;//{14, 8};
    	pathsMask[RightLeft][2] = (13 + 8*16)*4;//{13, 8};
    	pathsMask[RightLeft][3] = (12 + 8*16)*4;//{12, 8};
    	pathsMask[RightLeft][4] = (11 + 8*16)*4;//{11, 8};
    	pathsMask[RightLeft][5] = (10 + 8*16)*4;//{10, 8};
    	pathsMask[RightLeft][6] = (9 + 8*16)*4;//{9, 8};
    	pathsMask[RightLeft][7] = (8 + 8*16)*4;//{8, 8};
    	pathsMask[RightLeft][8] = (7 + 8*16)*4;//{7, 8};
    	pathsMask[RightLeft][9] = (6 + 8*16)*4;//{6, 8};
    	pathsMask[RightLeft][10] = (5 + 8*16)*4;//{5, 8};
    	pathsMask[RightLeft][11] = (4 + 8*16)*4;//{4, 8};
    	pathsMask[RightLeft][12] = (3 + 8*16)*4;//{3, 8};
    	pathsMask[RightLeft][13] = (2 + 8*16)*4;//{2, 8};
    	pathsMask[RightLeft][14] = (1 + 8*16)*4;//{1, 8};
    	pathsMask[RightLeft][15] = (0 + 8*16)*4;//{0, 8};
    	//=====================================================================RIGHT_UP===========================================================================================
    	pathsMask[RightUp][0] = (15 + 8*16)*4;//{15, 8};
    	pathsMask[RightUp][1] = (14 + 8*16)*4;//{14, 8};
    	pathsMask[RightUp][2] = (13 + 8*16)*4;//{13, 8};
    	pathsMask[RightUp][3] = (13 + 7*16)*4;//{13, 7};
    	pathsMask[RightUp][4] = (13 + 6*16)*4;//{13, 6};
    	pathsMask[RightUp][5] = (13 + 5*16)*4;//{13, 5};
    	pathsMask[RightUp][6] = (12 + 5*16)*4;//{12, 5};
    	pathsMask[RightUp][7] = (11 + 5*16)*4;//{11, 5};
    	pathsMask[RightUp][8] = (10 + 5*16)*4;//{10, 5};
    	pathsMask[RightUp][9] = (9 + 5*16)*4;//{9, 5};
    	pathsMask[RightUp][10] = (8 + 5*16)*4;//{8, 5};
    	pathsMask[RightUp][11] = (8 + 4*16)*4;//{8, 4};
    	pathsMask[RightUp][12] = (8 + 3*16)*4;//{8, 3};
    	pathsMask[RightUp][13] = (8 + 2*16)*4;//{8, 2};
    	pathsMask[RightUp][14] = (8 + 1*16)*4;//{8, 1};
    	pathsMask[RightUp][15] = (8 + 0*16)*4;//{8, 0};
    }
    
    public static void InitColors()
    {
    	fuzeColors = new byte[]{	
				(byte) 0, (byte) 0, (byte) 0, (byte) 255,
				(byte) 10, (byte) 10, (byte) 10, (byte) 255,
				(byte) 30, (byte) 30, (byte) 30, (byte) 255,
				(byte) 50, (byte) 50, (byte) 50, (byte) 255,
				(byte) 70, (byte) 70, (byte) 70, (byte) 255,
    			(byte) 95, (byte) 95, (byte) 95, (byte) 255,
    			(byte) 120, (byte) 120, (byte) 120, (byte) 255,
    			(byte) 145, (byte) 145, (byte) 145, (byte) 255,
    			(byte) 170, (byte) 170, (byte) 170, (byte) 255,
    			(byte) 195, (byte) 195, (byte) 195, (byte) 255,
    			(byte) 220, (byte) 220, (byte) 220, (byte) 255,
    						   };
    }
    
    @Override
    public void bindImage(RenderEngine par1RenderEngine) {
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, tileImage);
    }
    
    //WARNING!!! 1024 lines of code!!! Open with caution!!!
    public void InitSRC()
    {
    	src[0] = (byte)0;
    	src[1] = (byte)95;
    	src[2] = (byte)154;
    	src[3] = (byte)255;
    	src[4] = (byte)0;
    	src[5] = (byte)80;
    	src[6] = (byte)129;
    	src[7] = (byte)255;
    	src[8] = (byte)0;
    	src[9] = (byte)84;
    	src[10] = (byte)135;
    	src[11] = (byte)255;
    	src[12] = (byte)0;
    	src[13] = (byte)78;
    	src[14] = (byte)126;
    	src[15] = (byte)255;
    	src[16] = (byte)0;
    	src[17] = (byte)92;
    	src[18] = (byte)148;
    	src[19] = (byte)255;
    	src[20] = (byte)0;
    	src[21] = (byte)90;
    	src[22] = (byte)144;
    	src[23] = (byte)255;
    	src[24] = (byte)0;
    	src[25] = (byte)86;
    	src[26] = (byte)138;
    	src[27] = (byte)255;
    	src[28] = (byte)0;
    	src[29] = (byte)78;
    	src[30] = (byte)125;
    	src[31] = (byte)255;
    	src[32] = (byte)0;
    	src[33] = (byte)84;
    	src[34] = (byte)135;
    	src[35] = (byte)255;
    	src[36] = (byte)0;
    	src[37] = (byte)82;
    	src[38] = (byte)131;
    	src[39] = (byte)255;
    	src[40] = (byte)0;
    	src[41] = (byte)98;
    	src[42] = (byte)158;
    	src[43] = (byte)255;
    	src[44] = (byte)0;
    	src[45] = (byte)81;
    	src[46] = (byte)132;
    	src[47] = (byte)255;
    	src[48] = (byte)0;
    	src[49] = (byte)87;
    	src[50] = (byte)140;
    	src[51] = (byte)255;
    	src[52] = (byte)0;
    	src[53] = (byte)88;
    	src[54] = (byte)141;
    	src[55] = (byte)255;
    	src[56] = (byte)0;
    	src[57] = (byte)84;
    	src[58] = (byte)135;
    	src[59] = (byte)255;
    	src[60] = (byte)0;
    	src[61] = (byte)88;
    	src[62] = (byte)142;
    	src[63] = (byte)255;
    	src[64] = (byte)0;
    	src[65] = (byte)88;
    	src[66] = (byte)141;
    	src[67] = (byte)255;
    	src[68] = (byte)0;
    	src[69] = (byte)80;
    	src[70] = (byte)129;
    	src[71] = (byte)255;
    	src[72] = (byte)0;
    	src[73] = (byte)85;
    	src[74] = (byte)136;
    	src[75] = (byte)255;
    	src[76] = (byte)0;
    	src[77] = (byte)102;
    	src[78] = (byte)165;
    	src[79] = (byte)255;
    	src[80] = (byte)0;
    	src[81] = (byte)85;
    	src[82] = (byte)138;
    	src[83] = (byte)255;
    	src[84] = (byte)0;
    	src[85] = (byte)86;
    	src[86] = (byte)139;
    	src[87] = (byte)255;
    	src[88] = (byte)0;
    	src[89] = (byte)86;
    	src[90] = (byte)138;
    	src[91] = (byte)255;
    	src[92] = (byte)0;
    	src[93] = (byte)87;
    	src[94] = (byte)140;
    	src[95] = (byte)255;
    	src[96] = (byte)0;
    	src[97] = (byte)78;
    	src[98] = (byte)126;
    	src[99] = (byte)255;
    	src[100] = (byte)0;
    	src[101] = (byte)90;
    	src[102] = (byte)145;
    	src[103] = (byte)255;
    	src[104] = (byte)0;
    	src[105] = (byte)90;
    	src[106] = (byte)143;
    	src[107] = (byte)255;
    	src[108] = (byte)0;
    	src[109] = (byte)83;
    	src[110] = (byte)134;
    	src[111] = (byte)255;
    	src[112] = (byte)0;
    	src[113] = (byte)82;
    	src[114] = (byte)132;
    	src[115] = (byte)255;
    	src[116] = (byte)0;
    	src[117] = (byte)88;
    	src[118] = (byte)142;
    	src[119] = (byte)255;
    	src[120] = (byte)0;
    	src[121] = (byte)85;
    	src[122] = (byte)137;
    	src[123] = (byte)255;
    	src[124] = (byte)0;
    	src[125] = (byte)95;
    	src[126] = (byte)152;
    	src[127] = (byte)255;
    	src[128] = (byte)0;
    	src[129] = (byte)94;
    	src[130] = (byte)153;
    	src[131] = (byte)255;
    	src[132] = (byte)0;
    	src[133] = (byte)83;
    	src[134] = (byte)134;
    	src[135] = (byte)255;
    	src[136] = (byte)0;
    	src[137] = (byte)83;
    	src[138] = (byte)134;
    	src[139] = (byte)255;
    	src[140] = (byte)0;
    	src[141] = (byte)104;
    	src[142] = (byte)167;
    	src[143] = (byte)255;
    	src[144] = (byte)0;
    	src[145] = (byte)82;
    	src[146] = (byte)132;
    	src[147] = (byte)255;
    	src[148] = (byte)0;
    	src[149] = (byte)80;
    	src[150] = (byte)129;
    	src[151] = (byte)255;
    	src[152] = (byte)0;
    	src[153] = (byte)87;
    	src[154] = (byte)141;
    	src[155] = (byte)255;
    	src[156] = (byte)0;
    	src[157] = (byte)85;
    	src[158] = (byte)137;
    	src[159] = (byte)255;
    	src[160] = (byte)0;
    	src[161] = (byte)85;
    	src[162] = (byte)136;
    	src[163] = (byte)255;
    	src[164] = (byte)0;
    	src[165] = (byte)92;
    	src[166] = (byte)148;
    	src[167] = (byte)255;
    	src[168] = (byte)0;
    	src[169] = (byte)85;
    	src[170] = (byte)136;
    	src[171] = (byte)255;
    	src[172] = (byte)0;
    	src[173] = (byte)97;
    	src[174] = (byte)155;
    	src[175] = (byte)255;
    	src[176] = (byte)0;
    	src[177] = (byte)85;
    	src[178] = (byte)136;
    	src[179] = (byte)255;
    	src[180] = (byte)0;
    	src[181] = (byte)80;
    	src[182] = (byte)129;
    	src[183] = (byte)255;
    	src[184] = (byte)0;
    	src[185] = (byte)85;
    	src[186] = (byte)137;
    	src[187] = (byte)255;
    	src[188] = (byte)0;
    	src[189] = (byte)85;
    	src[190] = (byte)136;
    	src[191] = (byte)255;
    	src[192] = (byte)0;
    	src[193] = (byte)78;
    	src[194] = (byte)126;
    	src[195] = (byte)255;
    	src[196] = (byte)0;
    	src[197] = (byte)83;
    	src[198] = (byte)134;
    	src[199] = (byte)255;
    	src[200] = (byte)0;
    	src[201] = (byte)78;
    	src[202] = (byte)126;
    	src[203] = (byte)255;
    	src[204] = (byte)0;
    	src[205] = (byte)81;
    	src[206] = (byte)130;
    	src[207] = (byte)255;
    	src[208] = (byte)0;
    	src[209] = (byte)85;
    	src[210] = (byte)138;
    	src[211] = (byte)255;
    	src[212] = (byte)0;
    	src[213] = (byte)97;
    	src[214] = (byte)158;
    	src[215] = (byte)255;
    	src[216] = (byte)0;
    	src[217] = (byte)83;
    	src[218] = (byte)133;
    	src[219] = (byte)255;
    	src[220] = (byte)0;
    	src[221] = (byte)82;
    	src[222] = (byte)132;
    	src[223] = (byte)255;
    	src[224] = (byte)0;
    	src[225] = (byte)83;
    	src[226] = (byte)134;
    	src[227] = (byte)255;
    	src[228] = (byte)0;
    	src[229] = (byte)78;
    	src[230] = (byte)126;
    	src[231] = (byte)255;
    	src[232] = (byte)0;
    	src[233] = (byte)85;
    	src[234] = (byte)137;
    	src[235] = (byte)255;
    	src[236] = (byte)0;
    	src[237] = (byte)93;
    	src[238] = (byte)149;
    	src[239] = (byte)255;
    	src[240] = (byte)0;
    	src[241] = (byte)87;
    	src[242] = (byte)140;
    	src[243] = (byte)255;
    	src[244] = (byte)0;
    	src[245] = (byte)104;
    	src[246] = (byte)168;
    	src[247] = (byte)255;
    	src[248] = (byte)0;
    	src[249] = (byte)95;
    	src[250] = (byte)153;
    	src[251] = (byte)255;
    	src[252] = (byte)0;
    	src[253] = (byte)83;
    	src[254] = (byte)134;
    	src[255] = (byte)255;
    	src[256] = (byte)0;
    	src[257] = (byte)83;
    	src[258] = (byte)134;
    	src[259] = (byte)255;
    	src[260] = (byte)0;
    	src[261] = (byte)78;
    	src[262] = (byte)125;
    	src[263] = (byte)255;
    	src[264] = (byte)0;
    	src[265] = (byte)92;
    	src[266] = (byte)147;
    	src[267] = (byte)255;
    	src[268] = (byte)0;
    	src[269] = (byte)83;
    	src[270] = (byte)134;
    	src[271] = (byte)255;
    	src[272] = (byte)0;
    	src[273] = (byte)96;
    	src[274] = (byte)153;
    	src[275] = (byte)255;
    	src[276] = (byte)0;
    	src[277] = (byte)79;
    	src[278] = (byte)127;
    	src[279] = (byte)255;
    	src[280] = (byte)0;
    	src[281] = (byte)82;
    	src[282] = (byte)132;
    	src[283] = (byte)255;
    	src[284] = (byte)0;
    	src[285] = (byte)80;
    	src[286] = (byte)129;
    	src[287] = (byte)255;
    	src[288] = (byte)0;
    	src[289] = (byte)79;
    	src[290] = (byte)127;
    	src[291] = (byte)255;
    	src[292] = (byte)0;
    	src[293] = (byte)83;
    	src[294] = (byte)134;
    	src[295] = (byte)255;
    	src[296] = (byte)0;
    	src[297] = (byte)98;
    	src[298] = (byte)157;
    	src[299] = (byte)255;
    	src[300] = (byte)0;
    	src[301] = (byte)86;
    	src[302] = (byte)138;
    	src[303] = (byte)255;
    	src[304] = (byte)0;
    	src[305] = (byte)84;
    	src[306] = (byte)135;
    	src[307] = (byte)255;
    	src[308] = (byte)0;
    	src[309] = (byte)78;
    	src[310] = (byte)126;
    	src[311] = (byte)255;
    	src[312] = (byte)0;
    	src[313] = (byte)85;
    	src[314] = (byte)137;
    	src[315] = (byte)255;
    	src[316] = (byte)0;
    	src[317] = (byte)84;
    	src[318] = (byte)135;
    	src[319] = (byte)255;
    	src[320] = (byte)0;
    	src[321] = (byte)80;
    	src[322] = (byte)128;
    	src[323] = (byte)255;
    	src[324] = (byte)0;
    	src[325] = (byte)80;
    	src[326] = (byte)129;
    	src[327] = (byte)255;
    	src[328] = (byte)0;
    	src[329] = (byte)78;
    	src[330] = (byte)125;
    	src[331] = (byte)255;
    	src[332] = (byte)0;
    	src[333] = (byte)80;
    	src[334] = (byte)128;
    	src[335] = (byte)255;
    	src[336] = (byte)0;
    	src[337] = (byte)80;
    	src[338] = (byte)129;
    	src[339] = (byte)255;
    	src[340] = (byte)0;
    	src[341] = (byte)79;
    	src[342] = (byte)127;
    	src[343] = (byte)255;
    	src[344] = (byte)0;
    	src[345] = (byte)82;
    	src[346] = (byte)132;
    	src[347] = (byte)255;
    	src[348] = (byte)0;
    	src[349] = (byte)89;
    	src[350] = (byte)143;
    	src[351] = (byte)255;
    	src[352] = (byte)0;
    	src[353] = (byte)79;
    	src[354] = (byte)127;
    	src[355] = (byte)255;
    	src[356] = (byte)0;
    	src[357] = (byte)84;
    	src[358] = (byte)135;
    	src[359] = (byte)255;
    	src[360] = (byte)0;
    	src[361] = (byte)81;
    	src[362] = (byte)130;
    	src[363] = (byte)255;
    	src[364] = (byte)0;
    	src[365] = (byte)85;
    	src[366] = (byte)137;
    	src[367] = (byte)255;
    	src[368] = (byte)0;
    	src[369] = (byte)80;
    	src[370] = (byte)129;
    	src[371] = (byte)255;
    	src[372] = (byte)0;
    	src[373] = (byte)83;
    	src[374] = (byte)134;
    	src[375] = (byte)255;
    	src[376] = (byte)0;
    	src[377] = (byte)101;
    	src[378] = (byte)162;
    	src[379] = (byte)255;
    	src[380] = (byte)0;
    	src[381] = (byte)86;
    	src[382] = (byte)139;
    	src[383] = (byte)255;
    	src[384] = (byte)0;
    	src[385] = (byte)79;
    	src[386] = (byte)126;
    	src[387] = (byte)255;
    	src[388] = (byte)0;
    	src[389] = (byte)82;
    	src[390] = (byte)131;
    	src[391] = (byte)255;
    	src[392] = (byte)0;
    	src[393] = (byte)80;
    	src[394] = (byte)128;
    	src[395] = (byte)255;
    	src[396] = (byte)0;
    	src[397] = (byte)83;
    	src[398] = (byte)133;
    	src[399] = (byte)255;
    	src[400] = (byte)0;
    	src[401] = (byte)80;
    	src[402] = (byte)129;
    	src[403] = (byte)255;
    	src[404] = (byte)0;
    	src[405] = (byte)87;
    	src[406] = (byte)139;
    	src[407] = (byte)255;
    	src[408] = (byte)0;
    	src[409] = (byte)83;
    	src[410] = (byte)134;
    	src[411] = (byte)255;
    	src[412] = (byte)0;
    	src[413] = (byte)84;
    	src[414] = (byte)135;
    	src[415] = (byte)255;
    	src[416] = (byte)0;
    	src[417] = (byte)85;
    	src[418] = (byte)137;
    	src[419] = (byte)255;
    	src[420] = (byte)0;
    	src[421] = (byte)84;
    	src[422] = (byte)135;
    	src[423] = (byte)255;
    	src[424] = (byte)0;
    	src[425] = (byte)78;
    	src[426] = (byte)125;
    	src[427] = (byte)255;
    	src[428] = (byte)0;
    	src[429] = (byte)92;
    	src[430] = (byte)148;
    	src[431] = (byte)255;
    	src[432] = (byte)0;
    	src[433] = (byte)87;
    	src[434] = (byte)139;
    	src[435] = (byte)255;
    	src[436] = (byte)0;
    	src[437] = (byte)88;
    	src[438] = (byte)141;
    	src[439] = (byte)255;
    	src[440] = (byte)0;
    	src[441] = (byte)84;
    	src[442] = (byte)135;
    	src[443] = (byte)255;
    	src[444] = (byte)0;
    	src[445] = (byte)84;
    	src[446] = (byte)134;
    	src[447] = (byte)255;
    	src[448] = (byte)0;
    	src[449] = (byte)80;
    	src[450] = (byte)129;
    	src[451] = (byte)255;
    	src[452] = (byte)0;
    	src[453] = (byte)91;
    	src[454] = (byte)146;
    	src[455] = (byte)255;
    	src[456] = (byte)0;
    	src[457] = (byte)80;
    	src[458] = (byte)129;
    	src[459] = (byte)255;
    	src[460] = (byte)0;
    	src[461] = (byte)81;
    	src[462] = (byte)129;
    	src[463] = (byte)255;
    	src[464] = (byte)0;
    	src[465] = (byte)78;
    	src[466] = (byte)126;
    	src[467] = (byte)255;
    	src[468] = (byte)0;
    	src[469] = (byte)82;
    	src[470] = (byte)131;
    	src[471] = (byte)255;
    	src[472] = (byte)0;
    	src[473] = (byte)82;
    	src[474] = (byte)132;
    	src[475] = (byte)255;
    	src[476] = (byte)0;
    	src[477] = (byte)82;
    	src[478] = (byte)131;
    	src[479] = (byte)255;
    	src[480] = (byte)0;
    	src[481] = (byte)94;
    	src[482] = (byte)151;
    	src[483] = (byte)255;
    	src[484] = (byte)0;
    	src[485] = (byte)85;
    	src[486] = (byte)136;
    	src[487] = (byte)255;
    	src[488] = (byte)0;
    	src[489] = (byte)80;
    	src[490] = (byte)129;
    	src[491] = (byte)255;
    	src[492] = (byte)0;
    	src[493] = (byte)94;
    	src[494] = (byte)151;
    	src[495] = (byte)255;
    	src[496] = (byte)0;
    	src[497] = (byte)100;
    	src[498] = (byte)160;
    	src[499] = (byte)255;
    	src[500] = (byte)0;
    	src[501] = (byte)80;
    	src[502] = (byte)129;
    	src[503] = (byte)255;
    	src[504] = (byte)0;
    	src[505] = (byte)81;
    	src[506] = (byte)129;
    	src[507] = (byte)255;
    	src[508] = (byte)0;
    	src[509] = (byte)93;
    	src[510] = (byte)150;
    	src[511] = (byte)255;
    	src[512] = (byte)0;
    	src[513] = (byte)90;
    	src[514] = (byte)145;
    	src[515] = (byte)255;
    	src[516] = (byte)0;
    	src[517] = (byte)78;
    	src[518] = (byte)126;
    	src[519] = (byte)255;
    	src[520] = (byte)0;
    	src[521] = (byte)102;
    	src[522] = (byte)163;
    	src[523] = (byte)255;
    	src[524] = (byte)0;
    	src[525] = (byte)90;
    	src[526] = (byte)144;
    	src[527] = (byte)255;
    	src[528] = (byte)0;
    	src[529] = (byte)88;
    	src[530] = (byte)143;
    	src[531] = (byte)255;
    	src[532] = (byte)0;
    	src[533] = (byte)85;
    	src[534] = (byte)136;
    	src[535] = (byte)255;
    	src[536] = (byte)0;
    	src[537] = (byte)78;
    	src[538] = (byte)125;
    	src[539] = (byte)255;
    	src[540] = (byte)0;
    	src[541] = (byte)82;
    	src[542] = (byte)132;
    	src[543] = (byte)255;
    	src[544] = (byte)0;
    	src[545] = (byte)88;
    	src[546] = (byte)140;
    	src[547] = (byte)255;
    	src[548] = (byte)0;
    	src[549] = (byte)86;
    	src[550] = (byte)139;
    	src[551] = (byte)255;
    	src[552] = (byte)0;
    	src[553] = (byte)86;
    	src[554] = (byte)138;
    	src[555] = (byte)255;
    	src[556] = (byte)0;
    	src[557] = (byte)83;
    	src[558] = (byte)133;
    	src[559] = (byte)255;
    	src[560] = (byte)0;
    	src[561] = (byte)84;
    	src[562] = (byte)135;
    	src[563] = (byte)255;
    	src[564] = (byte)0;
    	src[565] = (byte)80;
    	src[566] = (byte)128;
    	src[567] = (byte)255;
    	src[568] = (byte)0;
    	src[569] = (byte)82;
    	src[570] = (byte)131;
    	src[571] = (byte)255;
    	src[572] = (byte)0;
    	src[573] = (byte)82;
    	src[574] = (byte)131;
    	src[575] = (byte)255;
    	src[576] = (byte)0;
    	src[577] = (byte)80;
    	src[578] = (byte)128;
    	src[579] = (byte)255;
    	src[580] = (byte)0;
    	src[581] = (byte)78;
    	src[582] = (byte)125;
    	src[583] = (byte)255;
    	src[584] = (byte)0;
    	src[585] = (byte)85;
    	src[586] = (byte)137;
    	src[587] = (byte)255;
    	src[588] = (byte)0;
    	src[589] = (byte)83;
    	src[590] = (byte)134;
    	src[591] = (byte)255;
    	src[592] = (byte)0;
    	src[593] = (byte)100;
    	src[594] = (byte)160;
    	src[595] = (byte)255;
    	src[596] = (byte)0;
    	src[597] = (byte)86;
    	src[598] = (byte)138;
    	src[599] = (byte)255;
    	src[600] = (byte)0;
    	src[601] = (byte)82;
    	src[602] = (byte)131;
    	src[603] = (byte)255;
    	src[604] = (byte)0;
    	src[605] = (byte)84;
    	src[606] = (byte)135;
    	src[607] = (byte)255;
    	src[608] = (byte)0;
    	src[609] = (byte)81;
    	src[610] = (byte)130;
    	src[611] = (byte)255;
    	src[612] = (byte)0;
    	src[613] = (byte)83;
    	src[614] = (byte)134;
    	src[615] = (byte)255;
    	src[616] = (byte)0;
    	src[617] = (byte)84;
    	src[618] = (byte)135;
    	src[619] = (byte)255;
    	src[620] = (byte)0;
    	src[621] = (byte)90;
    	src[622] = (byte)143;
    	src[623] = (byte)255;
    	src[624] = (byte)0;
    	src[625] = (byte)107;
    	src[626] = (byte)172;
    	src[627] = (byte)255;
    	src[628] = (byte)0;
    	src[629] = (byte)89;
    	src[630] = (byte)144;
    	src[631] = (byte)255;
    	src[632] = (byte)0;
    	src[633] = (byte)79;
    	src[634] = (byte)127;
    	src[635] = (byte)255;
    	src[636] = (byte)0;
    	src[637] = (byte)83;
    	src[638] = (byte)133;
    	src[639] = (byte)255;
    	src[640] = (byte)0;
    	src[641] = (byte)95;
    	src[642] = (byte)152;
    	src[643] = (byte)255;
    	src[644] = (byte)0;
    	src[645] = (byte)84;
    	src[646] = (byte)135;
    	src[647] = (byte)255;
    	src[648] = (byte)0;
    	src[649] = (byte)101;
    	src[650] = (byte)162;
    	src[651] = (byte)255;
    	src[652] = (byte)0;
    	src[653] = (byte)82;
    	src[654] = (byte)131;
    	src[655] = (byte)255;
    	src[656] = (byte)0;
    	src[657] = (byte)85;
    	src[658] = (byte)136;
    	src[659] = (byte)255;
    	src[660] = (byte)0;
    	src[661] = (byte)83;
    	src[662] = (byte)134;
    	src[663] = (byte)255;
    	src[664] = (byte)0;
    	src[665] = (byte)105;
    	src[666] = (byte)168;
    	src[667] = (byte)255;
    	src[668] = (byte)0;
    	src[669] = (byte)79;
    	src[670] = (byte)127;
    	src[671] = (byte)255;
    	src[672] = (byte)0;
    	src[673] = (byte)102;
    	src[674] = (byte)163;
    	src[675] = (byte)255;
    	src[676] = (byte)0;
    	src[677] = (byte)97;
    	src[678] = (byte)155;
    	src[679] = (byte)255;
    	src[680] = (byte)0;
    	src[681] = (byte)83;
    	src[682] = (byte)134;
    	src[683] = (byte)255;
    	src[684] = (byte)0;
    	src[685] = (byte)90;
    	src[686] = (byte)144;
    	src[687] = (byte)255;
    	src[688] = (byte)0;
    	src[689] = (byte)85;
    	src[690] = (byte)137;
    	src[691] = (byte)255;
    	src[692] = (byte)0;
    	src[693] = (byte)85;
    	src[694] = (byte)136;
    	src[695] = (byte)255;
    	src[696] = (byte)0;
    	src[697] = (byte)106;
    	src[698] = (byte)170;
    	src[699] = (byte)255;
    	src[700] = (byte)0;
    	src[701] = (byte)89;
    	src[702] = (byte)145;
    	src[703] = (byte)255;
    	src[704] = (byte)0;
    	src[705] = (byte)89;
    	src[706] = (byte)142;
    	src[707] = (byte)255;
    	src[708] = (byte)0;
    	src[709] = (byte)82;
    	src[710] = (byte)132;
    	src[711] = (byte)255;
    	src[712] = (byte)0;
    	src[713] = (byte)83;
    	src[714] = (byte)133;
    	src[715] = (byte)255;
    	src[716] = (byte)0;
    	src[717] = (byte)82;
    	src[718] = (byte)131;
    	src[719] = (byte)255;
    	src[720] = (byte)0;
    	src[721] = (byte)85;
    	src[722] = (byte)137;
    	src[723] = (byte)255;
    	src[724] = (byte)0;
    	src[725] = (byte)80;
    	src[726] = (byte)128;
    	src[727] = (byte)255;
    	src[728] = (byte)0;
    	src[729] = (byte)90;
    	src[730] = (byte)146;
    	src[731] = (byte)255;
    	src[732] = (byte)0;
    	src[733] = (byte)95;
    	src[734] = (byte)153;
    	src[735] = (byte)255;
    	src[736] = (byte)0;
    	src[737] = (byte)81;
    	src[738] = (byte)130;
    	src[739] = (byte)255;
    	src[740] = (byte)0;
    	src[741] = (byte)85;
    	src[742] = (byte)136;
    	src[743] = (byte)255;
    	src[744] = (byte)0;
    	src[745] = (byte)83;
    	src[746] = (byte)133;
    	src[747] = (byte)255;
    	src[748] = (byte)0;
    	src[749] = (byte)81;
    	src[750] = (byte)130;
    	src[751] = (byte)255;
    	src[752] = (byte)0;
    	src[753] = (byte)92;
    	src[754] = (byte)147;
    	src[755] = (byte)255;
    	src[756] = (byte)0;
    	src[757] = (byte)83;
    	src[758] = (byte)133;
    	src[759] = (byte)255;
    	src[760] = (byte)0;
    	src[761] = (byte)82;
    	src[762] = (byte)131;
    	src[763] = (byte)255;
    	src[764] = (byte)0;
    	src[765] = (byte)87;
    	src[766] = (byte)139;
    	src[767] = (byte)255;
    	src[768] = (byte)0;
    	src[769] = (byte)85;
    	src[770] = (byte)137;
    	src[771] = (byte)255;
    	src[772] = (byte)0;
    	src[773] = (byte)83;
    	src[774] = (byte)133;
    	src[775] = (byte)255;
    	src[776] = (byte)0;
    	src[777] = (byte)85;
    	src[778] = (byte)137;
    	src[779] = (byte)255;
    	src[780] = (byte)0;
    	src[781] = (byte)101;
    	src[782] = (byte)163;
    	src[783] = (byte)255;
    	src[784] = (byte)0;
    	src[785] = (byte)82;
    	src[786] = (byte)131;
    	src[787] = (byte)255;
    	src[788] = (byte)0;
    	src[789] = (byte)78;
    	src[790] = (byte)126;
    	src[791] = (byte)255;
    	src[792] = (byte)0;
    	src[793] = (byte)79;
    	src[794] = (byte)127;
    	src[795] = (byte)255;
    	src[796] = (byte)0;
    	src[797] = (byte)87;
    	src[798] = (byte)139;
    	src[799] = (byte)255;
    	src[800] = (byte)0;
    	src[801] = (byte)83;
    	src[802] = (byte)134;
    	src[803] = (byte)255;
    	src[804] = (byte)0;
    	src[805] = (byte)92;
    	src[806] = (byte)148;
    	src[807] = (byte)255;
    	src[808] = (byte)0;
    	src[809] = (byte)96;
    	src[810] = (byte)155;
    	src[811] = (byte)255;
    	src[812] = (byte)0;
    	src[813] = (byte)78;
    	src[814] = (byte)126;
    	src[815] = (byte)255;
    	src[816] = (byte)0;
    	src[817] = (byte)89;
    	src[818] = (byte)144;
    	src[819] = (byte)255;
    	src[820] = (byte)0;
    	src[821] = (byte)78;
    	src[822] = (byte)125;
    	src[823] = (byte)255;
    	src[824] = (byte)0;
    	src[825] = (byte)94;
    	src[826] = (byte)152;
    	src[827] = (byte)255;
    	src[828] = (byte)0;
    	src[829] = (byte)87;
    	src[830] = (byte)140;
    	src[831] = (byte)255;
    	src[832] = (byte)0;
    	src[833] = (byte)87;
    	src[834] = (byte)139;
    	src[835] = (byte)255;
    	src[836] = (byte)0;
    	src[837] = (byte)84;
    	src[838] = (byte)135;
    	src[839] = (byte)255;
    	src[840] = (byte)0;
    	src[841] = (byte)84;
    	src[842] = (byte)135;
    	src[843] = (byte)255;
    	src[844] = (byte)0;
    	src[845] = (byte)78;
    	src[846] = (byte)126;
    	src[847] = (byte)255;
    	src[848] = (byte)0;
    	src[849] = (byte)80;
    	src[850] = (byte)128;
    	src[851] = (byte)255;
    	src[852] = (byte)0;
    	src[853] = (byte)85;
    	src[854] = (byte)136;
    	src[855] = (byte)255;
    	src[856] = (byte)0;
    	src[857] = (byte)95;
    	src[858] = (byte)153;
    	src[859] = (byte)255;
    	src[860] = (byte)0;
    	src[861] = (byte)87;
    	src[862] = (byte)140;
    	src[863] = (byte)255;
    	src[864] = (byte)0;
    	src[865] = (byte)93;
    	src[866] = (byte)149;
    	src[867] = (byte)255;
    	src[868] = (byte)0;
    	src[869] = (byte)82;
    	src[870] = (byte)131;
    	src[871] = (byte)255;
    	src[872] = (byte)0;
    	src[873] = (byte)81;
    	src[874] = (byte)130;
    	src[875] = (byte)255;
    	src[876] = (byte)0;
    	src[877] = (byte)85;
    	src[878] = (byte)136;
    	src[879] = (byte)255;
    	src[880] = (byte)0;
    	src[881] = (byte)91;
    	src[882] = (byte)147;
    	src[883] = (byte)255;
    	src[884] = (byte)0;
    	src[885] = (byte)81;
    	src[886] = (byte)130;
    	src[887] = (byte)255;
    	src[888] = (byte)0;
    	src[889] = (byte)97;
    	src[890] = (byte)156;
    	src[891] = (byte)255;
    	src[892] = (byte)0;
    	src[893] = (byte)84;
    	src[894] = (byte)136;
    	src[895] = (byte)255;
    	src[896] = (byte)0;
    	src[897] = (byte)102;
    	src[898] = (byte)164;
    	src[899] = (byte)255;
    	src[900] = (byte)0;
    	src[901] = (byte)88;
    	src[902] = (byte)141;
    	src[903] = (byte)255;
    	src[904] = (byte)0;
    	src[905] = (byte)80;
    	src[906] = (byte)129;
    	src[907] = (byte)255;
    	src[908] = (byte)0;
    	src[909] = (byte)80;
    	src[910] = (byte)128;
    	src[911] = (byte)255;
    	src[912] = (byte)0;
    	src[913] = (byte)85;
    	src[914] = (byte)137;
    	src[915] = (byte)255;
    	src[916] = (byte)0;
    	src[917] = (byte)80;
    	src[918] = (byte)129;
    	src[919] = (byte)255;
    	src[920] = (byte)0;
    	src[921] = (byte)80;
    	src[922] = (byte)130;
    	src[923] = (byte)255;
    	src[924] = (byte)0;
    	src[925] = (byte)101;
    	src[926] = (byte)162;
    	src[927] = (byte)255;
    	src[928] = (byte)0;
    	src[929] = (byte)82;
    	src[930] = (byte)132;
    	src[931] = (byte)255;
    	src[932] = (byte)0;
    	src[933] = (byte)83;
    	src[934] = (byte)133;
    	src[935] = (byte)255;
    	src[936] = (byte)0;
    	src[937] = (byte)83;
    	src[938] = (byte)133;
    	src[939] = (byte)255;
    	src[940] = (byte)0;
    	src[941] = (byte)85;
    	src[942] = (byte)136;
    	src[943] = (byte)255;
    	src[944] = (byte)0;
    	src[945] = (byte)91;
    	src[946] = (byte)146;
    	src[947] = (byte)255;
    	src[948] = (byte)0;
    	src[949] = (byte)78;
    	src[950] = (byte)126;
    	src[951] = (byte)255;
    	src[952] = (byte)0;
    	src[953] = (byte)96;
    	src[954] = (byte)156;
    	src[955] = (byte)255;
    	src[956] = (byte)0;
    	src[957] = (byte)80;
    	src[958] = (byte)128;
    	src[959] = (byte)255;
    	src[960] = (byte)0;
    	src[961] = (byte)101;
    	src[962] = (byte)164;
    	src[963] = (byte)255;
    	src[964] = (byte)0;
    	src[965] = (byte)83;
    	src[966] = (byte)134;
    	src[967] = (byte)255;
    	src[968] = (byte)0;
    	src[969] = (byte)81;
    	src[970] = (byte)130;
    	src[971] = (byte)255;
    	src[972] = (byte)0;
    	src[973] = (byte)83;
    	src[974] = (byte)133;
    	src[975] = (byte)255;
    	src[976] = (byte)0;
    	src[977] = (byte)87;
    	src[978] = (byte)140;
    	src[979] = (byte)255;
    	src[980] = (byte)0;
    	src[981] = (byte)93;
    	src[982] = (byte)149;
    	src[983] = (byte)255;
    	src[984] = (byte)0;
    	src[985] = (byte)97;
    	src[986] = (byte)155;
    	src[987] = (byte)255;
    	src[988] = (byte)0;
    	src[989] = (byte)85;
    	src[990] = (byte)137;
    	src[991] = (byte)255;
    	src[992] = (byte)0;
    	src[993] = (byte)80;
    	src[994] = (byte)128;
    	src[995] = (byte)255;
    	src[996] = (byte)0;
    	src[997] = (byte)92;
    	src[998] = (byte)148;
    	src[999] = (byte)255;
    	src[1000] = (byte)0;
    	src[1001] = (byte)103;
    	src[1002] = (byte)164;
    	src[1003] = (byte)255;
    	src[1004] = (byte)0;
    	src[1005] = (byte)85;
    	src[1006] = (byte)136;
    	src[1007] = (byte)255;
    	src[1008] = (byte)0;
    	src[1009] = (byte)83;
    	src[1010] = (byte)133;
    	src[1011] = (byte)255;
    	src[1012] = (byte)0;
    	src[1013] = (byte)99;
    	src[1014] = (byte)159;
    	src[1015] = (byte)255;
    	src[1016] = (byte)0;
    	src[1017] = (byte)86;
    	src[1018] = (byte)138;
    	src[1019] = (byte)255;
    	src[1020] = (byte)0;
    	src[1021] = (byte)96;
    	src[1022] = (byte)155;
    	src[1023] = (byte)255;
    }
}
